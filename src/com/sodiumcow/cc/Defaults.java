package com.sodiumcow.cc;

import java.io.PrintStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.UUID;

import com.sodiumcow.cc.constant.HostType;

public class Defaults {
    // these are all .toLowerCase for case insensitive lookup
    private static final Set<String> ignore = new HashSet<String>(Arrays.asList(new String[] {
        ".alias",
        ".application",
        ".by",
        ".class",
        ".enabled",
        ".local",
        ".localhostclass",
        ".modevent",
        ".modified",
        ".moditem",
        ".modtype",
        ".oldmoditem",
        ".preconfigured",
        ".ready",
        ".serial",
        ".transport",
        ".type",
        "licensed",
        "notes",
        "origin",
        "passworddate"
        }));
    private static final Map<String,String> manualhostdefaults = new HashMap<String,String>();
    static {
        manualhostdefaults.put("Advanced.HighPriority",                "");
        manualhostdefaults.put("Advanced.PreferredPublicKeyAlgorithm", "");
    }
    private static final Map<String,String> manualmailboxdefaults = new HashMap<String,String>();
    static {
        manualmailboxdefaults.put("Advanced.HighPriority",            "");
        manualmailboxdefaults.put("Advanced.PGPCompressionAlgorithm", "System Default");
        manualmailboxdefaults.put("Advanced.PGPEncryptionAlgorithm",  "System Default");
        manualmailboxdefaults.put("Advanced.PGPHashAlgorithm",        "System Default");
        manualmailboxdefaults.put("Usesamecerts",                     "True");
        manualmailboxdefaults.put(".usercert",                        "");
        manualmailboxdefaults.put(".usercertpassword",                "");
    }

    private static final Map<HostType,Map<String,String>> hostmap = new HashMap<HostType,Map<String,String>>();
    private static final Map<HostType,Map<String,String>> mailboxmap = new HashMap<HostType,Map<String,String>>();
    static {
        Map<String,String> map;
        // *** from here
        map = new TreeMap<String,String>();
        map.put(".cemcapable", "False");
        map.put(".secure", "False");
        map.put(".servercertfile", "");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.AutoAcceptReceivedCertificate(CEM)", "");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Generatefilenameresponses", "False");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Messageversion", "1.1");
        map.put("Outbox", "outbox/");
        map.put("Overwrite", "False");
        map.put("Port", "0");
        map.put("Responseaction", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Serviceoverride", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST /as2\nAS2-From=,AS2-To=,Subject=,[Content-Type=|EDIFACT|X12|XML|Binary|Plain Text|EDI Consent|]");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.AS2, map);
        map = new TreeMap<String,String>();
        map.put(".folder", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".partnerservercertfile", "");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Asyncdeliverymethod", "2");
        map.put("Authtype", "0");
        map.put("Compressedrequest", "False");
        map.put("Deliverytype", "0");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "False");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Mictype", "0");
        map.put("Overridelistenercerts", "False");
        map.put("Receiptdesired", "False");
        map.put("Signedreceipt", "False");
        map.put("Signedrequest", "False");
        map.put("Useencrcert", "False");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.AS2, map);
        map = new TreeMap<String,String>();
        map.put(".securitymode", "None");
        map.put(".servercertfile", "");
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.DeleteZeroLengthFiles", "False");
        map.put("Advanced.ExplicitSSLCommand", "AUTH TLS");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriority", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.SSLMaximumProtocolVersion", "");
        map.put("Advanced.SSLMinimumProtocolVersion", "SSL 3.0");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "Binary");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Messageversion", "1.1");
        map.put("Outbox", "outbox/");
        map.put("Overwrite", "False");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Serverallowsdelete", "True");
        map.put("Serverrequirespbszfortls", "True");
        map.put("Serverrequiresprotpfortls", "True");
        map.put("Serverrequirestempdirectory", "False");
        map.put("Serverrequiresuniquefilenames", "False");
        map.put("Substitutepassiveipaddress", "True");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.AS3, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".folder", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".partnerservercertfile", "");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Asyncdeliverymethod", "4");
        map.put("Compressedrequest", "False");
        map.put("Contenttype", "-1");
        map.put("Deliverytype", "1");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "True");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Mictype", "0");
        map.put("Nopasswordrequired", "False");
        map.put("Overridelistenercerts", "False");
        map.put("Partneroverridelistenercert", "True");
        map.put("Receiptdesired", "True");
        map.put("Signedreceipt", "True");
        map.put("Signedrequest", "True");
        map.put("Subject", "AS3 Message");
        map.put("Useencrcert", "False");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.AS3, map);
        map = new TreeMap<String,String>();
        map.put(".id", "*Rw**");
        map.put(".secure", "False");
        map.put("Addcontenttypetoinbox", "False");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.Encryption-SigningOrder", "Sign then encrypt");
        map.put("Advanced.EncryptionAlgorithm", "TripleDES");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.ProfileSupport", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Contenttypedirs[Binary]", "binary");
        map.put("Contenttypedirs[EDI-Consent]", "");
        map.put("Contenttypedirs[EDIFACT]", "");
        map.put("Contenttypedirs[Other]", "other");
        map.put("Contenttypedirs[Plain Text]", "plain");
        map.put("Contenttypedirs[X12]", "");
        map.put("Contenttypedirs[XML]", "xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Overridelistenerfrompartyid", "False");
        map.put("Port", "0");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Storerawsent", "False");
        map.put("Syntax[PUT]", "POST /ebMS\nSOAPAction=\"ebXML\",[Content-Type=|EDIFACT|X12|XML|Binary|Plain Text|EDI-Consent|]");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.EBMS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Ackdesired", "False");
        map.put("Authtype", "0");
        map.put("Compressedrequest", "False");
        map.put("Eliminateduplicates", "True");
        map.put("Emailack", "False");
        map.put("Encryptedrequest", "False");
        map.put("Forceencryption", "False");
        map.put("Forcesignature", "False");
        map.put("Honorreplyrequests", "Any");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Overridelistenercerts", "False");
        map.put("Overridelistenerfromroleserviceaction", "False");
        map.put("Preservemessageorder", "False");
        map.put("Signedack", "False");
        map.put("Signedrequest", "False");
        map.put("Synchronousreply", "True");
        map.put("Synchronousreplyackonly", "True");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.EBMS, map);
        map = new TreeMap<String,String>();
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Advanced.DeleteZeroLengthFiles", "False");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "ASCII");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "21");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Substitutepassiveipaddress", "False");
        hostmap.put(HostType.FTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Nopasswordrequired", "False");
        map.put("Partneroverridelistenercert", "True");
        mailboxmap.put(HostType.FTP, map);
        map = new TreeMap<String,String>();
        map.put(".securitymode", "SSL AUTH");
        map.put("Activedataporthigh", "0");
        map.put("Activedataportlow", "0");
        map.put("Advanced.DeleteZeroLengthFiles", "True");
        map.put("Advanced.ExplicitSSLCommand", "AUTH TLS");
        map.put("Advanced.ExplicitSSLPostCommand", "PBSZ 0;PROT P");
        map.put("Advanced.FileListParseMethod", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.SSLMaximumProtocolVersion", "");
        map.put("Advanced.SSLMinimumProtocolVersion", "SSL 3.0");
        map.put("Advanced.UseNLST", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Datachannelmode", "Passive");
        map.put("Datatype", "ASCII");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Passivedataporthigh", "0");
        map.put("Passivedataportlow", "0");
        map.put("Port", "990");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Substitutepassiveipaddress", "False");
        hostmap.put(HostType.FTPS, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Nopasswordrequired", "False");
        map.put("Partneroverridelistenercert", "True");
        mailboxmap.put(HostType.FTPS, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "80");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST \nContent-type=|application/x-www-form-urlencoded|multipart/form-data|application/octet-stream|");
        hostmap.put(HostType.HTTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Header[PUT]", "Content-type=application/x-www-form-urlencoded");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        mailboxmap.put(HostType.HTTP, map);
        map = new TreeMap<String,String>();
        map.put(".secure", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "443");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST \nContent-type=|application/x-www-form-urlencoded|multipart/form-data|application/octet-stream|");
        hostmap.put(HostType.HTTPS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Header[PUT]", "Content-type=multipart/form-data");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        mailboxmap.put(HostType.HTTPS, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Port", "1414");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        hostmap.put(HostType.MQ, map);
        map = new TreeMap<String,String>();
        map.put(".enablereceivesecurity", "False");
        map.put(".enablesendsecurity", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".receiveauthclient", "False");
        map.put(".sendauthclient", "False");
        map.put(".usesamesecurity", "True");
        map.put("Forceuppercase", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Msgpriority", "0");
        map.put("Sendciphersuite", "SSL_RSA_WITH_3DES_EDE_CBC_SHA");
        map.put("Usereceiverqueue", "True");
        map.put("Usereplytoqueue", "False");
        map.put("Usesamechannel", "True");
        mailboxmap.put(HostType.MQ, map);
        map = new TreeMap<String,String>();
        map.put(".securetcpip", "False");
        map.put("Acecapable", "False");
        map.put("Advanced.DowngradeOFTPVersion", "");
        map.put("Advanced.EBCDICEncoding", "Cp500 EBCDIC International");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowrestart", "True");
        map.put("Buffercredits", "3");
        map.put("Buffersize", "128");
        map.put("Checkservername", "False");
        map.put("Compress", "False");
        map.put("Connecttype", "4");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Port", "-1");
        map.put("Recordsize", "128");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Tcpip", "True");
        hostmap.put(HostType.OFTP, map);
        map = new TreeMap<String,String>();
        map.put(".authenticationcertalias", "");
        map.put(".authenticationmyuseencryptioncert", "True");
        map.put(".authenticationpartneruseencryptioncert", "True");
        map.put(".authpartnercertfile", "");
        map.put(".eerpcertalias", "");
        map.put(".eerpmyusesigningcert", "True");
        map.put(".eerppartnersignfile", "");
        map.put(".eerppartnerusesigningcert", "True");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".submailbox", "False");
        map.put(".tlscertalias", "");
        map.put(".tlscertpassword", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Allowlistenersendaction", "False");
        map.put("Ciphersuite", "0");
        map.put("Compress", "False");
        map.put("Encryption", "False");
        map.put("Forceencryption", "False");
        map.put("Forcesignature", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Listenersendaction", "<send>");
        map.put("Localpackaging", "None");
        map.put("Overridedestination", "False");
        map.put("Overrideid", "False");
        map.put("Overridelistenercerts", "False");
        map.put("Overrideoriginator", "False");
        map.put("Requireauthentication", "False");
        map.put("Signed", "False");
        map.put("Signeerp", "False");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.OFTP, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Port", "25");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Storerawsent", "False");
        hostmap.put(HostType.SMTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Dsnentiremessage", "False");
        map.put("Dsnheadersonly", "False");
        map.put("Dsnondelay", "False");
        map.put("Dsnonsuccessorfailure", "False");
        map.put("Inmediatypes", "*");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Outmediatypes", "*");
        map.put("Overrideservice", "False");
        mailboxmap.put(HostType.SMTP, map);
        map = new TreeMap<String,String>();
        map.put(".securitymode", "None");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Port", "25");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Storerawsent", "False");
        hostmap.put(HostType.SMTPS, map);
        map = new TreeMap<String,String>();
        map.put(".clientcertalias", "");
        map.put(".clientcertpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Authtype", "0");
        map.put("Dsnentiremessage", "False");
        map.put("Dsnheadersonly", "True");
        map.put("Dsnondelay", "False");
        map.put("Dsnonsuccessorfailure", "False");
        map.put("Inmediatypes", "*");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Outmediatypes", "*");
        map.put("Overrideservice", "False");
        mailboxmap.put(HostType.SMTPS, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.BufferRequests", "true");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.PreferredCipherAlgorithm", "");
        map.put("Advanced.PreferredCompressionAlgorithm", "zlib");
        map.put("Advanced.RetrieveDirectorySort", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "22");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        hostmap.put(HostType.SFTP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Partneroverridelistenercert", "True");
        map.put("Usepkafile", "False");
        mailboxmap.put(HostType.SFTP, map);
        map = new TreeMap<String,String>();
        map.put("Ackmode", "HL7 Original Acknowledgments");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Defaultname", "%date%_%time%.MLLP");
        map.put("Editable", "True");
        map.put("Hiddenpanels", "Mailbox=Security");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Mllpinboundenabled", "True");
        map.put("Mllpinboundport", "2575");
        map.put("Mllpinboundsecure", "False");
        map.put("Mllpoutboundenabled", "True");
        map.put("Mllpoutboundsecure", "False");
        map.put("Port", "2575");
        map.put("Requiremllpclientauthisselected", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        hostmap.put(HostType.MLLP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put("Inboundaction", "<receive>");
        map.put("Inboundcreatequeue", "True");
        map.put("Inboundqueuename", "DIRECT=OS:.\\Private$\\ReceiveQueue");
        map.put("Inboundqueuetype", "MSMQ");
        map.put("Inboundrunatstartup", "True");
        map.put("Inboundusequeue", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Outboundaction", "<send>");
        map.put("Outboundcreatequeue", "True");
        map.put("Outboundqueuename", "DIRECT=OS:.\\Private$\\SendQueue");
        map.put("Outboundqueuetype", "MSMQ");
        map.put("Outboundrunatstartup", "True");
        map.put("Outboundsenderrestart", "5");
        map.put("Outboundusequeue", "False");
        mailboxmap.put(HostType.MLLP, map);
        map = new TreeMap<String,String>();
        map.put(".secure", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowuntrusted", "False");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "0");
        map.put("Receivedbox", "receivedbox\\");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Sentbox", "sentbox\\");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[CONFIRM]", "");
        map.put("Syntax[CONNECT]", "");
        map.put("Syntax[DELETE]", "");
        map.put("Syntax[DIR]", "");
        map.put("Syntax[DISCONNECT]", "");
        map.put("Syntax[GET]", "");
        map.put("Syntax[PUT]", "");
        map.put("Syntaxversion", "1");
        hostmap.put(HostType.WS, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Overridelistenercerts", "True");
        map.put("Requiretimestamp", "False");
        map.put("Sendtimestamp", "False");
        map.put("Usedefaultpolicy", "False");
        map.put("Usepartnersamecerts", "False");
        map.put("Usetradercerts", "False");
        mailboxmap.put(HostType.WS, map);
        map = new TreeMap<String,String>();
        map.put(".folder", "");
        map.put(".secure", "False");
        map.put("Addpipdirtoinbox", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.IncomingContentFormat", "Original");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Incomingcontentformat", "Original");
        map.put("Incomingcontentformattwoactiononly", "False");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Overwriteduplicatefilenames", "False");
        map.put("Port", "0");
        map.put("Rosettaversion", "2");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[PUT]", "POST /?[pipCode=]&[pipVersion=]&[pipInstanceId=]&[actionType=|request|response|]");
        map.put("Usedefaultfilename", "False");
        hostmap.put(HostType.RNIF, map);
        map = new TreeMap<String,String>();
        map.put(".certalias", "");
        map.put(".certpassword", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "TEST");
        map.put(".localencrcertpassword", "*CxoMCw**");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "TEST");
        map.put(".localsigncertpassword", "*CxoMCw**");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Overridelistenercerts", "False");
        map.put("Overridelistenerids", "False");
        map.put("Usepartnersamecerts", "True");
        mailboxmap.put(HostType.RNIF, map);
        map = new TreeMap<String,String>();
        map.put(".secure", "True");
        map.put("Advanced.EBICSVersion", "EBICS 2.4");
        map.put("Advanced.ESVersion", "A005");
        map.put("Advanced.EncryptionAlgorithm", "AES-256");
        map.put("Advanced.HighPriority", "");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.SSLCipher", "");
        map.put("Advanced.ServerType", "");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Checkservername", "False");
        map.put("Connecttype", "0");
        map.put("Defaultfilename", "%ebics.ordertype%.xml");
        map.put("Editable", "True");
        map.put("Fileidentifiedby", "0");
        map.put("Fileidentifiedfieldnum", "0");
        map.put("Fileidentifiedposition", "0");
        map.put("Headerlines", "0");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "443");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Securitymediumid", "00");
        map.put("Standardhtmldirectory", "True");
        map.put("Syntax[GET]", "POST \nContent-Type=|text/xml|application/xml|");
        map.put("Syntax[PUT]", "POST \nContent-Type=|text/xml|application/xml|");
        hostmap.put(HostType.EBICS, map);
        map = new TreeMap<String,String>();
        map.put(".certalias", "");
        map.put(".certpassword", "");
        map.put(".escertalias", "");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencrcertfile", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerservercertfile", "");
        map.put(".partnersigncertfile", "");
        map.put(".uselocalsamecerts", "True");
        map.put("Authtype", "0");
        map.put("Header[GET]", "Content-Type=text/xml");
        map.put("Header[PUT]", "Content-Type=text/xml");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Overridelistenercerts", "False");
        map.put("Signatureclass", "Transport signature (type 'T')");
        map.put("Usepartnersamecerts", "False");
        mailboxmap.put(HostType.EBICS, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.Encryption", "None");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.Overwrite", "Always");
        map.put("Advanced.Policy", "Adaptive");
        map.put("Advanced.ResumeCheck", "Off");
        map.put("Advanced.TransportEncryption", "NONE");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Inbox", "inbox/");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Outbox", "outbox/");
        map.put("Port", "-1");
        map.put("Proxyfirewall", "<None>");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "False");
        map.put("Secureportrequired", "False");
        map.put("Udpport", "-1");
        hostmap.put(HostType.FASP, map);
        map = new TreeMap<String,String>();
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Localpackaging", "None");
        map.put("Packagingdecrypt", "False");
        map.put("Packagingencrypt", "False");
        map.put("Usepkafile", "False");
        mailboxmap.put(HostType.FASP, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowincomingnofileextension", "True");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "True");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfileextensions", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Port", "0");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        hostmap.put(HostType.LOCAL_FTP, map);
        map = new TreeMap<String,String>();
        map.put(".as3user", "False");
        map.put(".folder", "");
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencrcertalias", "");
        map.put(".localencrcertpassword", "");
        map.put(".localencrpending", "False");
        map.put(".localencrreadonly", "False");
        map.put(".localencryptcert", "");
        map.put(".localsigncertalias", "");
        map.put(".localsigncertpassword", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".partnerreadonly", "False");
        map.put(".servercertfile", "");
        map.put(".serversigncertfile", "");
        map.put("Advanced.Compression-SigningOrder", "Sign then compress");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "ZIP");
        map.put("Advanced.PGPEncryptionAlgorithm", "TripleDES");
        map.put("Advanced.PGPHashAlgorithm", "SHA-256");
        map.put("Advanced.UseAS3ContentTypeForFileExtension", "true");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Asyncdeliverymethod", "4");
        map.put("Compressedrequest", "False");
        map.put("Contenttype", "-1");
        map.put("Deliverytype", "1");
        map.put("Emailmdn", "False");
        map.put("Encryptedrequest", "False");
        map.put("Encryptionmethod", "4");
        map.put("Forceencryption", "False");
        map.put("Forcemdnsignature", "False");
        map.put("Forcesignature", "False");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Ldaphomedir", "False");
        map.put("Localpackaging", "None");
        map.put("Localreadonly", "False");
        map.put("Localsignpending", "False");
        map.put("Messageversion", "1.1");
        map.put("Mictype", "0");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Overridelistenercerts", "False");
        map.put("Passworddate", "2014/06/24 14:14");
        map.put("Pipeincomingpayload", "False");
        map.put("Receiptdesired", "False");
        map.put("Signedreceipt", "False");
        map.put("Signedrequest", "False");
        map.put("Usedefroot", "True");
        map.put("Useencrcert", "False");
        map.put("Userlockedoutuntil", "0");
        map.put("Usertype", "0");
        map.put("Usesamecerts", "False");
        map.put("Usesigncert", "False");
        mailboxmap.put(HostType.LOCAL_FTP, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Associatedwebportal", "Default Portal");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "True");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfileextensions", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Overwritefiles", "False");
        map.put("Poolsize", "2");
        map.put("Port", "0");
        map.put("Portalapplets", "False");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        map.put("Viewpartnermailboxes", "False");
        hostmap.put(HostType.LOCAL_HTTP, map);
        map = new TreeMap<String,String>();
        map.put(".associateprimarymailbox", "False");
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".sslclientauth", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Ldaphomedir", "False");
        map.put("Localpackaging", "None");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Passworddate", "2014/06/24 14:14");
        map.put("Pipeincomingpayload", "False");
        map.put("Usedefroot", "True");
        map.put("Userlockedoutuntil", "0");
        mailboxmap.put(HostType.LOCAL_HTTP, map);
        map = new TreeMap<String,String>();
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Allowincomingnofileextension", "True");
        map.put("Connecttype", "0");
        map.put("Editable", "True");
        map.put("Enablepasswordpolicy", "True");
        map.put("Ftprootpath", "local/root");
        map.put("Inbox", "inbox\\");
        map.put("Incomingfileextensions", "*");
        map.put("Index", "0");
        map.put("Indexdate", "-1");
        map.put("Internal", "0");
        map.put("Ipfilterrequired", "False");
        map.put("Makeremovedirectories", "True");
        map.put("Outbox", "outbox\\payload\\");
        map.put("Overridepasswordpolicy", "False");
        map.put("Port", "0");
        map.put("Readonlyusers", "False");
        map.put("Runnable", "True");
        map.put("Runninglocalrequired", "True");
        map.put("Secureportrequired", "False");
        hostmap.put(HostType.LOCAL_SFTP, map);
        map = new TreeMap<String,String>();
        map.put(".ldapusergroup", "False");
        map.put(".localdecryptcert", "");
        map.put(".localencryptcert", "");
        map.put(".partnerclientcertfile", "");
        map.put(".partnerdecryptcert", "");
        map.put(".partnerdecryptpassword", "");
        map.put(".partnerencryptcert", "");
        map.put(".partnerpackaging", "None");
        map.put(".usepka", "False");
        map.put("Advanced.HighPriorityIncomingWeight", "10");
        map.put("Advanced.HighPriorityOutgoingWeight", "10");
        map.put("Advanced.OutboxSort", "System Default");
        map.put("Advanced.PGPCompressionAlgorithm", "System Default");
        map.put("Advanced.PGPEncryptionAlgorithm", "System Default");
        map.put("Advanced.PGPHashAlgorithm", "System Default");
        map.put("Advanced.XMLEncryptionAlgorithm", "System Default");
        map.put("Advanced.ZipCompressionLevel", "System Default");
        map.put("Advanced.action.NoSubDirectories", "");
        map.put("Homedirectory", "myTradingPartner");
        map.put("Lastclientemailexecutedate", "-1");
        map.put("Lastserveremailexecutedate", "-1");
        map.put("Ldaphomedir", "False");
        map.put("Localpackaging", "None");
        map.put("Overridedomain", "False");
        map.put("Overridefilter", "False");
        map.put("Passworddate", "2014/06/24 14:14");
        map.put("Pipeincomingpayload", "False");
        map.put("Usedefroot", "True");
        map.put("Usepkafile", "False");
        map.put("Userlockedoutuntil", "0");
        mailboxmap.put(HostType.LOCAL_SFTP, map);
        // *** to here is generated from the Shell using dump *:audit or printAllDefaults()
    }

    private static String q(String s) {
        return s.replaceAll("\\\\","\\\\\\\\")
                .replaceAll("\n", "\\\\n")
                .replaceAll("\"", "\\\\\"");
    }
    private static final String ALIAS = UUID.randomUUID().toString();
    public static void printDefaults(PrintStream out, Core core, HostType type) {
        Map<String,String> hostprops;
        Map<String,String> mailboxprops;
        try {
            Host host = core.activateHost(type, ALIAS);
            host.save();
            Mailbox mailbox = host.getMailboxes()[0];
            hostprops = host.getProperties();
            mailboxprops = mailbox.getProperties();
            core.remove(host.getPath());
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        // the dangerous part is done -- now just print the results
        out.println("        map = new TreeMap<String,String>();");
        for (Map.Entry<String, String> e : hostprops.entrySet()) {
            if (!ignore.contains(e.getKey().toLowerCase())) {
                out.printf("        map.put(\"%s\", \"%s\");\n", e.getKey(), q(e.getValue()));
            }
        }
        out.printf("        hostmap.put(HostType.%s, map);\n", type.name());
        out.println("        map = new TreeMap<String,String>();");
        for (Map.Entry<String, String> e : mailboxprops.entrySet()) {
            if (!ignore.contains(e.getKey().toLowerCase())) {
                out.printf("        map.put(\"%s\", \"%s\");\n", e.getKey(), q(e.getValue()));
            }
        }
        out.printf("        mailboxmap.put(HostType.%s, map);\n", type.name());
    }
    public static void printAllDefaults(PrintStream out, Core core) {
        for (HostType t : HostType.values()) {
            printDefaults(out, core, t);
        }
    }

    public static Map<String,String> getHostDefaults(HostType type) {
        return hostmap.get(type);
    }

    public static Map<String,String> suppressHostDefaults(HostType type, Map<String,String> props) {
        if (props!=null) {
            Map<String,String> defaults = getHostDefaults(type);
            Iterator<Map.Entry<String,String>> i = props.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry<String,String> e = i.next();
                if (ignore.contains(e.getKey().toLowerCase()) ||
                    e.getValue().equalsIgnoreCase(defaults.get(e.getKey())) ||
                    e.getValue().equalsIgnoreCase(manualhostdefaults.get(e.getKey()))) {
                    i.remove();
                }
            }
        }
        return props;
    }

    public static Map<String,String> getMailboxDefaults(HostType type) {
        return mailboxmap.get(type);
    }

    public static Map<String,String> suppressMailboxDefaults(HostType type, Map<String,String> props) {
        if (props!=null) {
            Map<String,String> defaults = getMailboxDefaults(type);
            Iterator<Map.Entry<String,String>> i = props.entrySet().iterator();
            while (i.hasNext()) {
                Map.Entry<String,String> e = i.next();
                if (ignore.contains(e.getKey().toLowerCase()) ||
                    e.getValue().equalsIgnoreCase(defaults.get(e.getKey())) ||
                    e.getValue().equalsIgnoreCase(manualmailboxdefaults.get(e.getKey()))) {
                    i.remove();
                }
            }
        }
        return props;
    }
}
